@page "/EntradasGuacales/Delete/{EntradaId:int}"
@using P1_AP1_GregoryRodriguez.Services
@using P1_AP1_GregoryRodriguez.Models
@inject EntradasGuacalesService entradasGuacalesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<div class="container">
	<div class="card shadow-lg">
		<div class="card-header text-center">
			<h5 class="card-title">Seguro que desea eliminar la entrada?</h5>
		</div>

		<div class="card-body">
			<div class="mt-3">
				<label class="form-label"><strong>Id: </strong>@Entrada.IdEntrada</label>
			</div>
			
			<div class="mt-3">
				<label class="form-label"><strong>Nombre Cliente: </strong>@Entrada.NombreCliente</label>
			</div>

			<div class="mt-3">
				<label class="form-label"><strong>Fecha: </strong>@Entrada.Fecha</label>
			</div> 

			<div class="mt-3">
				<label class="form-label"><strong>Cantidad: </strong>@Entrada.Cantidad</label>
			</div>

			<div class="mt-3">
				<label class="form-label"><strong>Precio: </strong>@Entrada.Precio</label>
			</div>
		</div>

		<div class="card-footer">
			<a href="/EntradasGuacales/Index" class="btn btn-secondary bi bi-arrow-left">Volver</a>
			<button type="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar">Eliminar</button>
		</div>
	</div>
</div>
@if (!string.IsNullOrEmpty(Mensaje))
{
	<label class="alert alert-danger">Mensaje</label>
}
@code {
	[Parameter]
	public int EntradaId { get; set; }

	public EntradasGuacales Entrada { get; set; }
	public string Mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Entrada = await entradasGuacalesService.Buscar(EntradaId);
	}

	public async Task Eliminar()
	{
		var eliminado = await entradasGuacalesService.Eliminar(EntradaId);

		if(eliminado)
		{
			navigationManager.NavigateTo("/EntradasGuacales/Index");
		}
		else
		{
			Mensaje = "No se pudo eliminar la entrada correctamente";
		}
	}

}
