@page "/Guacales/Index"
@using P1_AP1_GregoryRodriguez.Services
@using P1_AP1_GregoryRodriguez.Models
@inject EntradasGuacalesService entradasGuacalesService
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h5 class="card-title">Lista de Entradas de Guacales</h5>
			<a href="/EntradasGuacales/Create" class="btn btn-primary bi bi-plus-square"> Crear</a>
		</div>
		@*Body*@
		<div class="card-body">
			<div class="row mt-3">
				<div class="col-3">
					<label class="col-form-label"><strong>Desde</strong></label>
					<InputDate class="form-control" @bind-Value="Desde"></InputDate>
				</div>

				<div class="col-3">
					<label class="col-form-label"><strong>Hasta</strong></label>
					<InputDate class="form-control" @bind-Value="Hasta"></InputDate>
				</div>
			</div>

			<div class="row">
				<div class="col-3">
					<label class="form-label"><strong>Filtrar Por: </strong></label>
				</div>

				<div class="col-4">
					<label class="form-label"><strong>Busqueda</strong></label>
				</div>
			</div>
			
			<div class="row">
				<div class="col-3">
					<InputSelect class="form-select" @bind-Value="Filtro">
						<option value="" selected disabled>Elija una opcion</option>
						<option value="Id">Id</option>
						<option value="Nombre">Nombre Cliente</option>
						<option value="Cantidad">Cantidad</option>
						<option value="Precio">Precio</option>
						<option value="Fecha">Fecha</option>
					</InputSelect>
				</div>

				<div class="col-4">
					<div class="input-group">
						<input class="form-control" @bind-value="ValorFiltro" placeholder="Buscar" />
						<button type="button" class="btn btn-primary bi bi-search" @onclick="Buscar"></button>
					</div>
				</div>
				<div class="col-3">
					<button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
				</div>
			</div>

			<table class="table table-hover mt-3">
				<thead class="table table-striped text-black">
					<tr>
						<th>Id</th>
						<th>Nombres</th>
						<th>Cantidad</th>
						<th>Precio</th>
						<th>Fecha</th>
						<th>Importe</th>
						<th>Opciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var guacal in ListaEntradas)
					{
						<tr>
							<td>@guacal.IdEntrada</td>
							<td>@guacal.NombreCliente</td>
							<td>@guacal.Cantidad</td>
							<td>@guacal.Precio</td>
							<td>@guacal.Fecha</td>
							<td>@(guacal.Cantidad * guacal.Precio)</td>

							<td>
								<a href="/EntradasGuacales/Edit/@guacal.IdEntrada" class="btn btn-outline-primary bi bi-pencil-square"></a>
								<a href="/EntradasGuacales/Delete/@guacal.IdEntrada" class="btn btn-outline-danger bi bi-trash"></a>
							</td>
						</tr>
					}
				</tbody>
			</table>


		</div>

		@*Footer*@
		<div class="card-footer d-flex justify-content-end">
			<div class="d-flex flex-column text-end">
				<label class="form-label"><strong>Cantidad de Guacales: </strong>@ListaEntradas.Sum(a => a.Cantidad).ToString("n2")</label>
				<label class="form-label"><strong>Monto total: </strong>@ListaEntradas.Sum(a => a.Precio * a.Cantidad).ToString("n2")</label>
			</div>
		</div>
	</div>
</div>

@code {

	public List<EntradasGuacales> ListaEntradas { get; set; }
	public string Filtro { get; set; } = string.Empty;
	public string ValorFiltro { get; set; } = string.Empty;

	public DateTime? Desde { get; set; }
	public DateTime? Hasta { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListaEntradas = await entradasGuacalesService.Listar(e => e.IdEntrada > 0);
	}


	public async Task Buscar()
	{
		var listaFiltrada = await entradasGuacalesService.Listar(e => e.IdEntrada > 0);

		if(!string.IsNullOrEmpty(Filtro))
		{
			if (Filtro == "Id" && int.TryParse(ValorFiltro, out int id))
			{
				listaFiltrada = listaFiltrada.Where(e => e.IdEntrada == id).ToList();
			}
			else if (Filtro == "Nombre")
			{
				listaFiltrada = listaFiltrada.Where(e => e.NombreCliente.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
			}
			else if (Filtro == "Cantidad" && int.TryParse(ValorFiltro, out int cantidad))
			{
				listaFiltrada = listaFiltrada.Where(e => e.Cantidad == cantidad).ToList();
			}
			else if (Filtro == "Precio" && double.TryParse(ValorFiltro, out double precio))
			{
				listaFiltrada = listaFiltrada.Where(e => e.Precio == precio).ToList();
			}
			else if(Filtro == "Fecha")
			{
				if(Desde.HasValue)
				{
					listaFiltrada = listaFiltrada.Where(e => e.Fecha.Date >= Desde.Value.Date).ToList();
				}
				if(Hasta.HasValue)
				{
					DateTime fechaHasta = Hasta.Value.Date.AddDays(1).AddSeconds(-1);
					listaFiltrada = listaFiltrada.Where(e => e.Fecha <= fechaHasta).ToList();
				}
			}
		}

		ListaEntradas = listaFiltrada;

	}

	public async Task Restablecer()
	{
		ListaEntradas = await entradasGuacalesService.Listar(e => e.IdEntrada > 0);
		Filtro = string.Empty;
		ValorFiltro = string.Empty;
		Desde = null;
		Hasta = null;
	}
}
